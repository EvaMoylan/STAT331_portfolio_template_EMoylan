---
title: "STAT 331 Portfolio"
author: "Eva Moylan"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r}
#| label: wd-1-csv

#Lab 2- Question 1

surveys <- read_csv(here::here("data",
                               "surveys.csv")) #Load in data
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

#Check-in 2.3

AgesXLSX <- read_xlsx(here::here("Week 2", 
                                 "Ages_Data", 
                                 "ages.xlsx"), 
                      sheet = "ages") #Looks like first sheet is blank so this specifies to load the sheet named "ages" stored within the same file
```

-   `txt`

```{r}
#| label: wd-1-txt

#Check-in 2.3 

AgesMystery <- read_delim(here::here("Week 2", 
                                     "Ages_Data", 
                                     "ages_mystery.txt"), 
                          delim = "|") #This is not already spaced so add delim = "|" to separate lists
```

**WD-2: I can select necessary columns from a dataset.**

```{r}
#| label: wd-2

#Lab 3- Question 5

teacher_evals_clean <- evals |>
  rename(sex = gender) |> #rename gender column to 'sex'
  filter(no_participants >= 10) |> # remove all courses with fewer than 10 respondents
  mutate(teacher_id = as.factor(teacher_id), #change to a character
         seniority = as.factor(seniority), #change to a character
         question_no = question_no-900) |> #change question number to 1-10
  select(-(stud_grade_avg:stud_grade_var_coef_cur),
         -(class_duration:maximum_score)) #remove rows we don't need

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r}
#| label: wd-3-numeric


```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

```

-   factor

```{r}
#| label: wd-3-factor

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric

#Lab 3 - Question 5
teacher_evals_clean <- evals |>
  rename(sex = gender) |> #rename gender column to 'sex'
  filter(no_participants >= 10) |> # remove all courses with fewer than 10 respondents
  mutate(teacher_id = as.factor(teacher_id), #change to a character
         seniority = as.factor(seniority), #change to a character
         question_no = question_no-900) |> #change question number to 1-10
  select(-(stud_grade_avg:stud_grade_var_coef_cur),
         -(class_duration:maximum_score)) #remove rows we don't need

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

#Lab 5 - Witness Interviews

interview |>
  inner_join(person, #keeps only rows in 'person' that are also in 'interview'
             by = join_by(person_id == id)) |> #join using key: person_id (interviews) and id (person)
  mutate(is_Annabel = str_detect(string = name,
                                 pattern = "Annabel"),
         .after = name) |> #new column after the name column with T/F if the person's first name is Annabel
  filter(address_street_name %in% c("Northwestern Dr",
                                    "Franklin Ave"),
         address_number == max(address_number) | #either highest address number *or* name is Annabel
         is_Annabel == TRUE) |>
  pull(transcript) #1 = Morty Schapiro, #2 = Annabel Miller
```

-   factor (example must use functions from **forcats**)

```{r}
#| label: wd-4-factor

#Lab 4 - Question 3

a_childcare <- ca_childcare |> #I want the object to be updated with regions
  mutate(county_name = str_remove(string = county_name, 
                                  pattern = "County"),
         region = fct_collapse(.f = county_name,
                               "Superior California" = c("Butte ",
                                                         "Modoc ",
                                                         "Colusa ", 
                                                         "El Dorado ", 
                                                         "Glenn ", 
                                                         "Lassen ", 
                                                         "Nevada ", 
                                                         "Placer ", 
                                                         "Plumas ", 
                                                         "Sacramento ", 
                                                         "Shasta ", 
                                                         "Sierra ", 
                                                         "Siskiyou ",
                                                         "Sutter ",
                                                         "Tehama ",
                                                         "Yolo ",
                                                         "Yuba "),
                               "North Coast" = c("Del Norte ",
                                                 "Humboldt ",
                                                 "Lake ",
                                                 "Mendocino ",
                                                 "Napa ",
                                                 "Sonoma ",
                                                 "Trinity "),
                               "San Francisco Bay Area" = c("Alameda ",
                                                            "Contra Costa ",
                                                            "Marin ",
                                                            "San Francisco ",
                                                            "San Mateo ",
                                                            "Santa Clara ",
                                                            "Solano "),
                               "Northern San Joaquin Valley" = c("Alpine ",
                                                                 "Amador ",
                                                                 "Calaveras ",
                                                                 "Madera ",
                                                                 "Mariposa ",
                                                                 "Merced ",
                                                                 "Mono ",
                                                                 "San Joaquin ",
                                                                 "Stanislaus ",
                                                                 "Tuolumne "),
                               "Central Coast" = c("Monterey ", 
                                                   "San Benito ", 
                                                   "San Luis Obispo ", 
                                                   "Santa Barbara ", 
                                                   "Santa Cruz ", 
                                                   "Ventura "),
                               "Southern San Joaquin Valley" = c("Fresno ",
                                                                 "Inyo ",
                                                                 "Kern ",
                                                                 "Kings ",
                                                                 "Tulare "),
                               "Inland Empire" = c("Riverside ",
                                                   "San Bernardino "),
                               "Los Angeles County" = c("Los Angeles "),
                               "Orange County" = c("Orange "),
                               "San Diego Area - Imperial" = c("San Diego ",
                                                               "Imperial ")
                               ))

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

#Lab 5- Crime Scene Report

crime_scene_report |>
  mutate(date = ymd(date)) |> #numeric date becomes year-month-day date format
  filter(type == "murder",
         date == "2018-01-15",
         city == "SQL City") |>
  pull(description)

#Note: Original code was modified to include mutating to date format versus filtering the date in numeric format.
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r}
#| label: wd-5-left

```

-   `right_join()`

```{r}
#| label: wd-5-right

```

-   `inner_join()`

```{r}
#| label: wd-5-inner

#Lab 5- Applying Witness Accounts

get_fit_now_check_in |>
  inner_join(get_fit_now_member,
             by = join_by(membership_id == id)) |>
  inner_join(person,
             by = join_by(person_id == id,
                          name == name)) |> #two keys, name and id's
  inner_join(drivers_license,
             by = join_by(license_id == id)) |>
  mutate(plate_number = str_detect(string = plate_number,
                                    pattern = "H42W"),
         membership_id = str_detect(string = membership_id,
                                    pattern = "48Z")) |>
  filter(gender == "male",
         membership_status == "gold",
         check_in_date == "20180109",
         membership_id == TRUE,
         plate_number == TRUE) |>
  pull(name)
```

-   `full_join()`

```{r}
#| label: wd-5-full

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

#Lab 4- Question 6

ca_childcare |>
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "child_age",
               values_to = "w_median_price") |>
  mutate(child_age = fct_recode(.f = child_age, #Change the names of each level
                                "Infant" = "mc_infant",
                                "Toddler" = "mc_toddler",
                                "Preschool" = "mc_preschool"),
         child_age = fct_relevel(.f = child_age, #Change order of the levels
                                 "Infant",
                                 "Toddler",
                                 "Preschool")) |>
  ggplot(mapping = aes(x = study_year,
                       y = w_median_price,
                       color = fct_reorder2(.f = region,
                                            .x = study_year,
                                            .y = w_median_price))) + #Order the regions by median price
  geom_point(size = 0.5) +
  geom_smooth(method = "loess", 
              linewidth = 0.5) +
  facet_wrap(~child_age) +
  scale_x_continuous(n.breaks = 6) +
  scale_y_continuous(limits = c(100, 
                                500)) +
  theme_bw() +
  scale_color_manual(values = palette) + #use the palette made earlier
  labs(x = "Study Year",
       y = NULL,
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  theme(aspect.ratio = 1,
        axis.text = element_text(size = 6),
        axis.title = element_text(size = 8),
        title = element_text(size = 8),
        legend.title = element_text(size = 9))
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

#Lab 4 - Question 4

ca_childcare |>
  group_by(region, study_year) |>
  summarize(mhi_2018 = median(mhi_2018),
            .groups = "drop") |> #values now are median for each year at each county 
  filter(study_year %in% c(2008, 
                         2018)) |>
  pivot_wider(id_cols = "region", #region stays from original table orientation 
              names_from = study_year, #I want 2008 and 2018 to become columns
              values_from = mhi_2018, #I want the corresponding values to be this
              names_prefix = "Med_household_income_") |>  
  rename("Region" = "region") |>
  select(c(`Region`, starts_with("Med_household_income_"))) |> 
  arrange(desc(`Med_household_income_2018`))
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

```

-   Example of function formatting

```{r}
#| label: r-2-3

#Will fulfill later in the quarter.
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example

```

-   Example of function stops

```{r}
#| label: r-3-function-stops

#Will fulfill later in the quarter.
```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

```{r}
#| label: dvs-1-num

```

-   at least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

```

-   at least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date

#Lab 4- Question 6

ca_childcare |>
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "child_age",
               values_to = "w_median_price") |>
  mutate(child_age = fct_recode(.f = child_age, #Change the names of each level
                                "Infant" = "mc_infant",
                                "Toddler" = "mc_toddler",
                                "Preschool" = "mc_preschool"),
         child_age = fct_relevel(.f = child_age, #Change order of the levels
                                 "Infant",
                                 "Toddler",
                                 "Preschool")) |>
  ggplot(mapping = aes(x = study_year,
                       y = w_median_price,
                       color = fct_reorder2(.f = region,
                                            .x = study_year,
                                            .y = w_median_price))) + #Order the regions by median price
  geom_point(size = 0.5) +
  geom_smooth(method = "loess", 
              linewidth = 0.5) +
  facet_wrap(~child_age) +
  scale_x_continuous(n.breaks = 6) +
  scale_y_continuous(limits = c(100, 
                                500)) +
  theme_bw() +
  scale_color_manual(values = palette) + #use the palette made earlier
  labs(x = "Study Year",
       y = NULL,
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  theme(aspect.ratio = 1,
        axis.text = element_text(size = 6),
        axis.title = element_text(size = 8),
        title = element_text(size = 8),
        legend.title = element_text(size = 9))
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

```{r}
#| label: dvs-2-1

#Challenge 3- Hot

#Box plot to compare weight within species
ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = species,
                     color = genus)) +
  geom_boxplot() + #Remove plotting all the points here; clutters the plot
  scale_color_manual(values = cdPalette_grey) + 
  annotate("text", y = 1:14, x = 325, label = c("Neotoma", #N. abigula
                                                "Chaetodipus", #C. baileyi
                                                "Peromyscus", #P. eremicus
                                                "Perognathus", #P. flavus
                                                "Reithrodontomys", #R. fulvencens
                                                "Sigmodon", #S. hispidus
                                                "Onychomys", #O. leucogaster
                                                "Peromyscus", #P. maniculatus
                                                "Reithrodontomys", #R. megalotis
                                                "Dipodomys", #D. merriami
                                                "Dipodomys", #D. ordii
                                                "Chaetodipus", #C. penicillatus
                                                "Dipodomys", #O. spectabilis
                                                "Onychomys")) + #O. torridus
  theme_bw() + 
  scale_x_continuous(limits = c(0, 350)) + #Neotoma gets cut off so expand x-axis limit
  labs(x = "Weight (g)",
       y = NULL,
       subtitle = "Annotations represent genera",
       title = "Rodent Weight Across Species") +
  theme(legend.position = "none")

#Note: Original code was modified to use only one annotate function for every species name. The subtitle was also reworded. 
```

-   I can modify the text in my plot to be more readable
-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-2 & dvs-2-3

#Lab 4- Question 6

ca_childcare |>
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "child_age",
               values_to = "w_median_price") |>
  mutate(child_age = fct_recode(.f = child_age, #Change the names of each level
                                "Infant" = "mc_infant",
                                "Toddler" = "mc_toddler",
                                "Preschool" = "mc_preschool"),
         child_age = fct_relevel(.f = child_age, #Change order of the levels
                                 "Infant",
                                 "Toddler",
                                 "Preschool")) |>
  ggplot(mapping = aes(x = study_year,
                       y = w_median_price,
                       color = fct_reorder2(.f = region,
                                            .x = study_year,
                                            .y = w_median_price))) + #Order the regions by median price
  geom_point(size = 0.5) +
  geom_smooth(method = "loess", 
              linewidth = 0.5) +
  facet_wrap(~child_age) +
  scale_x_continuous(n.breaks = 6) +
  scale_y_continuous(limits = c(100, 
                                500)) +
  theme_bw() +
  scale_color_manual(values = palette) + #use the palette made earlier
  labs(x = "Study Year",
       y = NULL,
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  theme(aspect.ratio = 1,
        axis.text = element_text(size = 6),
        axis.title = element_text(size = 8),
        title = element_text(size = 8),
        legend.title = element_text(size = 9))
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

```{r}
#| label: dvs-3-1


#Lab 4- Question 6

palette <- colorRampPalette(brewer.pal(8,"Accent"))(10) #Brewer palette only has 8 colors, so make a palette with 10

ca_childcare |>
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "child_age",
               values_to = "w_median_price") |>
  mutate(child_age = fct_recode(.f = child_age, #Change the names of each level
                                "Infant" = "mc_infant",
                                "Toddler" = "mc_toddler",
                                "Preschool" = "mc_preschool"),
         child_age = fct_relevel(.f = child_age, #Change order of the levels
                                 "Infant",
                                 "Toddler",
                                 "Preschool")) |>
  ggplot(mapping = aes(x = study_year,
                       y = w_median_price,
                       color = fct_reorder2(.f = region,
                                            .x = study_year,
                                            .y = w_median_price))) + #Order the regions by median price
  geom_point(size = 0.5) +
  geom_smooth(method = "loess", 
              linewidth = 0.5) +
  facet_wrap(~child_age) +
  scale_x_continuous(n.breaks = 6) +
  scale_y_continuous(limits = c(100, 
                                500)) +
  theme_bw() +
  scale_color_manual(values = palette) + #use the palette made earlier
  labs(x = "Study Year",
       y = NULL,
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  theme(aspect.ratio = 1,
        axis.text = element_text(size = 6),
        axis.title = element_text(size = 8),
        title = element_text(size = 8),
        legend.title = element_text(size = 9))
```

-   I can use annotations

```{r}
#| label: dvs-3-2

#Lab 5 - Witness Interviews

#Join interviews data and person data, to find witnesses based on their address
interview |>
  inner_join(person, #keeps only rows in 'person' that are also in 'interview'
             by = join_by(person_id == id)) |> #join using key: person_id (interviews) and id (person)
  mutate(is_Annabel = str_detect(string = name,
                                 pattern = "Annabel"),
         .after = name) |> #new column after the name column with T/F if the person's first name is Annabel
  filter(address_street_name %in% c("Northwestern Dr",
                                    "Franklin Ave"),
         address_number == max(address_number) | #either highest address number *or* name is Annabel
         is_Annabel == TRUE) |>
  pull(transcript) #1 = Morty Schapiro, #2 = Annabel Miller
```

-   I can be creative...

```{r}
#| label: dvs-3-3

#Challenge 3- Hot

#Box plot to compare weight within species
ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = species,
                     color = genus)) +
  geom_boxplot() + #Remove plotting all the points here; clutters the plot
  scale_color_manual(values = cdPalette_grey) + 
  annotate("text", y = 1:14, x = 325, label = c("Neotoma", #N. abigula
                                                "Chaetodipus", #C. baileyi
                                                "Peromyscus", #P. eremicus
                                                "Perognathus", #P. flavus
                                                "Reithrodontomys", #R. fulvencens
                                                "Sigmodon", #S. hispidus
                                                "Onychomys", #O. leucogaster
                                                "Peromyscus", #P. maniculatus
                                                "Reithrodontomys", #R. megalotis
                                                "Dipodomys", #D. merriami
                                                "Dipodomys", #D. ordii
                                                "Chaetodipus", #C. penicillatus
                                                "Dipodomys", #O. spectabilis
                                                "Onychomys")) + #O. torridus
  theme_bw() + 
  scale_x_continuous(limits = c(0, 350)) + #Neotoma gets cut off so expand x-axis limit
  labs(x = "Weight (g)",
       y = NULL,
       subtitle = "Annotations represent genera",
       title = "Rodent Weight Across Species") +
  theme(legend.position = "none")

#Note: Original code was modified to use only one annotate function for every species name. The subtitle was also reworded. 
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

#Lab 3- Question 7

teacher_evals_clean |>
  group_by(teacher_id, course_id) |> 
  summarize(
    across(.col = question_no:sex, #summarize across these columns...
           .fns = ~sum(is.na(.x))), #for these 'x' entries, keep if NA
    .groups = "drop" #un-group
    ) |> 
  filter(
    if_any(.col = question_no:sex,
           .fns = ~.x != 0)) #if any entries in these columns are not equal to 0, keep that row
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r}
#| label: dvs-6-1

```

-   Example 2

```{r}
#| label: dvs-6-2

```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1

#Lab 4 - Question 4

ca_childcare |>
  group_by(region, study_year) |>
  summarize(mhi_2018 = median(mhi_2018),
            .groups = "drop") |> #values now are median for each year at each county 
  filter(study_year %in% c(2008, 
                         2018)) |>
  pivot_wider(id_cols = "region", #region stays from original table orientation 
              names_from = study_year, #I want 2008 and 2018 to become columns
              values_from = mhi_2018, #I want the corresponding values to be this
              names_prefix = "Med_household_income_") |>  
  rename("Region" = "region") |>
  select(c(`Region`, starts_with("Med_household_income_"))) |> 
  arrange(desc(`Med_household_income_2018`))
```

-   Example 2

```{r}
#| label: dvs-7-2

#Lab 4 - Question 5

ca_childcare |>
  filter(study_year == 2018) |> #filter first to work with less data
  group_by(region, study_year) |>
  summarize(mhi_2018 = median(mhi_2018), #values now are median for each year at each county
            mc_infant = median(mc_infant),
            .groups = 'drop') |>
  pivot_wider(id_cols = "region", #region stays from original table orientation 
              names_from = study_year,
              values_from = c(mhi_2018,
                              mc_infant)) |>
  rename("Median_household_income_2018" = "mhi_2018_2018",
         "Median_infant_childcare$_2018" = "mc_infant_2018",
         "Region" = "region") |> 
  slice_min(`Median_infant_childcare$_2018`) #Superior CA has the lowest med childcare for infants in 2018

#Note: Changes to the origional code- moving the filter function to the beginning of the pipeline and renaming the columns.
```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

```

-   `across()`

```{r}
#| label: pe-1-across

#Lab 3- Question 7

teacher_evals_clean |>
  group_by(teacher_id, course_id) |> 
  summarize(
    across(.col = question_no:sex, #summarize across these columns...
           .fns = ~sum(is.na(.x))), #for these 'x' entries, keep if NA
    .groups = "drop" #un-group
    ) |> 
  filter(
    if_any(.col = question_no:sex,
           .fns = ~.x != 0)) #if any entries in these columns are not equal to 0, keep that row
```

-   `map()` functions

```{r}
#| label: pe-1-map-1

#Will fulfill later in the quarter.
```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1

#Will fulfill later in the quarter.
```

-   Function that operates on data frames

```{r}
#| label: pe-2-2

#Will fulfill later in the quarter.
```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across

#Will fulfill later in the quarter.
```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

#Will fulfill later in the quarter.
```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

#Will fulfill later in the quarter.
```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

#Lab 4- Question 6

ca_childcare |>
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "child_age",
               values_to = "w_median_price") |>
  mutate(child_age = fct_recode(.f = child_age, #Change the names of each level
                                "Infant" = "mc_infant",
                                "Toddler" = "mc_toddler",
                                "Preschool" = "mc_preschool"),
         child_age = fct_relevel(.f = child_age, #Change order of the levels
                                 "Infant",
                                 "Toddler",
                                 "Preschool")) |>
  ggplot(mapping = aes(x = study_year,
                       y = w_median_price,
                       color = fct_reorder2(.f = region,
                                            .x = study_year,
                                            .y = w_median_price))) + #Order the regions by median price
  geom_point(size = 0.5) +
  geom_smooth(method = "loess", 
              linewidth = 0.5) +
  facet_wrap(~child_age) +
  scale_x_continuous(n.breaks = 6) +
  scale_y_continuous(limits = c(100, 
                                500)) +
  theme_bw() +
  scale_color_manual(values = palette) + #use the palette made earlier
  labs(x = "Study Year",
       y = NULL,
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  theme(aspect.ratio = 1,
        axis.text = element_text(size = 6),
        axis.title = element_text(size = 8),
        title = element_text(size = 8),
        legend.title = element_text(size = 9))
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

#Will fulfill later in the quarter.
```

-   Example 2

```{r}
#| label: dsm-1-2

#Will fulfill later in the quarter.
```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

#Lab 1- Question 10

#Conduct a two-sample t-test assuming unequal variances and a two-sided alternative.
#Is tooth length different between supplement delivery methods?
t.test(formula = len ~ supp, 
       data = ToothGrowth, 
       alternative = "two.sided", 
       var.equal = FALSE)

#Note: Specifiying the formula argument was added to the origional code.
#(i.e., formula = len ~ supp, instead of len ~ supp)
```

-   Example 2

```{r}
#| label: dsm-2-2

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
